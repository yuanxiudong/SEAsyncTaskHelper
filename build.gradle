apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    buildToolsVersion "27.0.3"


    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

}


/**
 * Build and package release jar.
 */
task archiveReleaseJar(type: Jar, dependsOn: build) {
    archiveName "$project.name-$android.defaultConfig.versionCode" + ".jar"
    from(project.buildDir.absolutePath + "/intermediates/classes/release/")
}

/**
 * Generate java doc api.
 */
task generateJavadoc(type: Javadoc, dependsOn: archiveReleaseJar) {
    title = '$project.name api'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.links('http://docs.oracle.com/javase/7/docs/api/')
    options.links('http://d.android.com/reference/')
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.locale = 'en_US'
    options.memberLevel = JavadocMemberLevel.PUBLIC
    include 'com/seagle/android/task/helper/**'
    exclude '**/BuildConfig.java'
    exclude '**/R**'
    failOnError false
}

/**
 * Generate java doc api jar.
 */
task generateJavadocJar(type: Jar, dependsOn: generateJavadoc) {
    classifier = 'javadoc'
    from generateJavadoc.destinationDir
}

/**
 * Copy doc file to doc folder.
 */
task copyFiles(dependsOn: generateJavadocJar) {
    doLast {
        def docOutputPath = "docs"
        copy {
            from('build/docs/javadoc/')
            into(docOutputPath)
            include('**/*.*')
        }
    }
}

/**
 * Package jar and doc.
 */
task pkgJar(dependsOn: copyFiles) {
    doLast {
        println("Package jar complete")
    }
}
